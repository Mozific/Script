-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- Debug function
local function debugPrint(message)
    print("[ApertureHub Debug]: " .. tostring(message))
end

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield', true, 10))()
if not Rayfield then
    debugPrint("Failed to load Rayfield library")
    return
end
debugPrint("Rayfield library loaded successfully")

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "Aperture Science Innovators",
    Title = "Ocyx",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Ocyx",
    Theme = "Ocean",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ApertureHubConfig",
        FileName = "ApertureHub"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Enter Access code",
        Note = "",
        FileName = "ApertureKeys",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"GlaDOS", "Meat"}
    }
})
debugPrint("Window created successfully")

-- Tabs
local PlayerTab = Window:CreateTab("Player", 4483362458)
local VisualTab = Window:CreateTab("Visual", 4483362458)
local UniversalTab = Window:CreateTab("Universal", 4483362458)
local GamesTab = Window:CreateTab("Games", 4483362458)

-- ==================== PLAYER TAB ====================
local PlayerSection = PlayerTab:CreateSection("Player")
local defaultWalkSpeed = 16
local defaultJumpPower = 50
local walkspeedEnabled = false
local jumpPowerEnabled = false
local walkspeedValue = defaultWalkSpeed
local jumpPowerValue = defaultJumpPower

local WalkspeedSlider = PlayerTab:CreateSlider({
    Name = "Walkspeed",
    Range = {16, 200},
    Increment = 1,
    CurrentValue = 16,
    Flag = "WalkspeedFlag",
    Callback = function(val)
        walkspeedValue = val
        if walkspeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = val
            debugPrint("Walkspeed set to: " .. val)
        end
    end
})

local JumpPowerSlider = PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    CurrentValue = 50,
    Flag = "JumpPowerFlag",
    Callback = function(val)
        jumpPowerValue = val
        if jumpPowerEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = val
            debugPrint("JumpPower set to: " .. val)
        end
    end
})

local WalkspeedToggle = PlayerTab:CreateToggle({
    Name = "Enable Walkspeed",
    CurrentValue = false,
    Flag = "WalkspeedToggleFlag",
    Callback = function(state)
        walkspeedEnabled = state
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            local humanoid = LocalPlayer.Character.Humanoid
            humanoid.WalkSpeed = state and walkspeedValue or defaultWalkSpeed
            debugPrint("Walkspeed toggle: " .. (state and "Enabled" or "Disabled"))
        end
    end
})

local JumpPowerToggle = PlayerTab:CreateToggle({
    Name = "Enable JumpPower",
    CurrentValue = false,
    Flag = "JumpPowerToggleFlag",
    Callback = function(state)
        jumpPowerEnabled = state
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            local humanoid = LocalPlayer.Character.Humanoid
            humanoid.JumpPower = state and jumpPowerValue or defaultJumpPower
            debugPrint("JumpPower toggle: " .. (state and "Enabled" or "Disabled"))
        end
    end
})

-- Noclip
local NoclipEnabled = false
local noclipConnection
local NoclipToggle = PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipFlag",
    Callback = function(state)
        NoclipEnabled = state
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
        if state then
            noclipConnection = RunService.Stepped:Connect(function()
                if NoclipEnabled and LocalPlayer.Character then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            debugPrint("Noclip enabled")
        else
            debugPrint("Noclip disabled")
        end
    end
})

-- ==================== VISUAL TAB (ESP + SPECTATE) ====================
local EspSection = VisualTab:CreateSection("ESP Settings")
local ESP = {
    Enabled = false,
    Names = false,
    SelectedTeam = "All",
    NameColor = Color3.fromRGB(255, 255, 255),
    MaxDistance = 500
}
local espConnections = {}
local highlightCache = {}
local espUpdateInterval = 1.5
local lastEspUpdate = 0

local function createESP(player)
    if player == LocalPlayer or (ESP.SelectedTeam ~= "All" and player.Team and player.Team.Name ~= ESP.SelectedTeam) then
        return
    end
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    local localPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if localPos and (character.HumanoidRootPart.Position - localPos.Position).Magnitude > ESP.MaxDistance then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESPHighlight"
    highlight.Adornee = character
    highlight.FillColor = player.Team and player.Team.TeamColor.Color or Color3.fromRGB(255, 0, 0)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    highlight.FillTransparency = 0.95
    highlight.OutlineTransparency = 0.5
    highlight.Parent = character

    local name
    if ESP.Names then
        name = Instance.new("BillboardGui")
        name.Name = "ESPName"
        name.Size = UDim2.new(0, 40, 0, 10)
        name.StudsOffset = Vector3.new(0, 1.5, 0)
        name.AlwaysOnTop = false
        name.Adornee = character:FindFirstChild("Head")
        local text = Instance.new("TextLabel")
        text.Size = UDim2.new(1, 0, 1, 0)
        text.BackgroundTransparency = 1
        text.TextColor3 = ESP.NameColor
        text.Text = player.Name
        text.TextScaled = true
        text.TextStrokeTransparency = 0.95
        text.Parent = name
        name.Parent = character
    end
    highlightCache[player] = {highlight = highlight, name = name}
end

local function updateESP()
    if not ESP.Enabled then return end
    local localPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    for player, data in pairs(highlightCache) do
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") or
           (ESP.SelectedTeam ~= "All" and player.Team and player.Team.Name ~= ESP.SelectedTeam) or
           (localPos and (player.Character.HumanoidRootPart.Position - localPos.Position).Magnitude > ESP.MaxDistance) then
            if data.highlight then data.highlight:Destroy() end
            if data.name then data.name:Destroy() end
            highlightCache[player] = nil
        else
            data.highlight.Visible = ESP.Enabled
            if data.name then data.name.Visible = ESP.Names end
            data.highlight.FillColor = player.Team and player.Team.TeamColor.Color or Color3.fromRGB(255, 0, 0)
        end
    end
end

local EspToggle = VisualTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Flag = "ESPFlag",
    Callback = function(state)
        ESP.Enabled = state
        if state then
            for _, player in pairs(Players:GetPlayers()) do createESP(player) end
            espConnections["update"] = RunService.Heartbeat:Connect(function(dt)
                lastEspUpdate = lastEspUpdate + dt
                if lastEspUpdate >= espUpdateInterval then
                    updateESP()
                    lastEspUpdate = 0
                end
            end)
        else
            for _, data in pairs(highlightCache) do
                if data.highlight then data.highlight:Destroy() end
                if data.name then data.name:Destroy() end
            end
            highlightCache = {}
            for _, conn in pairs(espConnections) do conn:Disconnect() end
            espConnections = {}
        end
        debugPrint("ESP toggle: " .. (state and "Enabled" or "Disabled"))
    end
})

local NameToggle = VisualTab:CreateToggle({
    Name = "Show Names",
    CurrentValue = false,
    Flag = "ESPNameFlag",
    Callback = function(state)
        ESP.Names = state
        if ESP.Enabled then
            EspToggle.Callback(false)
            EspToggle.Callback(true)
        end
        debugPrint("ESP Names: " .. (state and "Enabled" or "Disabled"))
    end
})

local TeamDropdown = VisualTab:CreateDropdown({
    Name = "Select Team",
    Options = {"All"},
    CurrentOption = {"All"},
    MultipleOptions = false,
    Flag = "ESPTeamDropdown",
    Callback = function(options)
        ESP.SelectedTeam = options[1]
        if ESP.Enabled then
            EspToggle.Callback(false)
            EspToggle.Callback(true)
        end
        debugPrint("ESP Team selected: " .. options[1])
    end
})

-- Spectate
local ViewSection = VisualTab:CreateSection("View")
local spectatingPlayer = nil
local lastSelectedPlayerName = nil

local ViewToggle = VisualTab:CreateToggle({
    Name = "Spectate Player",
    CurrentValue = false,
    Flag = "ViewPlayersFlag",
    Callback = function(state)
        if not state then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
            end
            spectatingPlayer = nil
            debugPrint("Spectate disabled")
        elseif lastSelectedPlayerName then
            local target = Players:FindFirstChild(lastSelectedPlayerName)
            if target and target.Character and target.Character:FindFirstChild("Humanoid") then
                spectatingPlayer = target
                Workspace.CurrentCamera.CameraSubject = target.Character.Humanoid
                debugPrint("Spectating: " .. target.Name)
            else
                ViewToggle:Set(false)
                PlayerDropdown:Set({})
                lastSelectedPlayerName = nil
            end
        else
            ViewToggle:Set(false)
        end
    end
})

local PlayerDropdown = VisualTab:CreateDropdown({
    Name = "Select Player",
    Options = {},
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "PlayerViewDropdown",
    Callback = function(options)
        lastSelectedPlayerName = options[1]
        local target = Players:FindFirstChild(lastSelectedPlayerName)
        if target and target.Character and target.Character:FindFirstChild("Humanoid") then
            spectatingPlayer = target
            if ViewToggle.CurrentValue then
                Workspace.CurrentCamera.CameraSubject = target.Character.Humanoid
            end
        else
            lastSelectedPlayerName = nil
            if ViewToggle.CurrentValue then ViewToggle:Set(false) end
        end
        PlayerDropdown:Set({lastSelectedPlayerName})
    end
})

local RefreshButton = VisualTab:CreateButton({
    Name = "Refresh Players",
    Callback = function()
        local players = {}
        local cur = lastSelectedPlayerName
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= LocalPlayer then table.insert(players, p.Name) end
        end
        PlayerDropdown:Refresh(players)
        if cur and table.find(players, cur) then
            PlayerDropdown:Set({cur})
        else
            lastSelectedPlayerName = nil
            spectatingPlayer = nil
            if ViewToggle.CurrentValue then ViewToggle:Set(false) end
        end

        local teams = {"All"}
        for _, t in pairs(Teams:GetTeams()) do table.insert(teams, t.Name) end
        TeamDropdown:Refresh(teams)
        debugPrint("Refreshed player & team lists")
    end
})

-- ==================== UNIVERSAL TAB ====================
local UniversalCommandsSection = UniversalTab:CreateSection("Universal Commands")

UniversalTab:CreateButton({Name = "Infinite Yield", Callback = function() pcall(function() loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))() end) end})
UniversalTab:CreateButton({Name = "Nameless Admin", Callback = function() pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/Fantemil/Nameless-Admin/main/Source"))() end) end})
UniversalTab:CreateButton({Name = "QuirkyCMDS", Callback = function() pcall(function() loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-QuirkyCMD-FE-admin-8667"))() end) end})
UniversalTab:CreateButton({Name = "Reviz Admin", Callback = function() pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/Stefanuk12/REVIZ-ADMIN/main/source.lua"))() end) end})
UniversalTab:CreateButton({Name = "Owl Hub", Callback = function() pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/CriShoux/OwlHub/master/OwlHub.txt"))() end) end})

-- Mobile Tools
local MobileToolsSection = UniversalTab:CreateSection("Mobile Tools")

UniversalTab:CreateButton({Name = "Keyboard", Callback = function() pcall(function() loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-key-buttons-25179"))() end) end})

-- Click TP
local ClickTPEnabled = false
UniversalTab:CreateToggle({
    Name = "Click TP (Tap to Teleport)",
    CurrentValue = false,
    Flag = "ClickTPFlag",
    Callback = function(state)
        ClickTPEnabled = state
        if state then
            local conn
            conn = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch and LocalPlayer.Character then
                    local pos = input.Position
                    local ray = Workspace.CurrentCamera:ScreenPointToRay(pos.X, pos.Y)
                    local result = Workspace:FindPartOnRayWithIgnoreList(Ray.new(ray.Origin, ray.Direction * 1000), {LocalPlayer.Character})
                    if result then
                        LocalPlayer.Character:MoveTo(result.Position + Vector3.new(0, 3, 0))
                    end
                end
            end)
            task.spawn(function()
                while ClickTPEnabled do task.wait() end
                if conn then conn:Disconnect() end
            end)
        end
    end
})

-- Mobile Fly
local FlyEnabled = false
UniversalTab:CreateToggle({
    Name = "Mobile Fly",
    CurrentValue = false,
    Flag = "FlyFlag",
    Callback = function(state)
        FlyEnabled = state
        if state and LocalPlayer.Character then
            local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then return end
            local bv = Instance.new("BodyVelocity", hrp)
            bv.MaxForce = Vector3.new(4000,4000,4000)
            local bg = Instance.new("BodyGyro", hrp)
            bg.MaxTorque = Vector3.new(4000,4000,4000)

            local gui = Instance.new("ScreenGui", CoreGui)
            local btn = Instance.new("TextButton", gui)
            btn.Size = UDim2.new(0,80,0,80)
            btn.Position = UDim2.new(0.85,0,0.7,0)
            btn.Text = "UP"
            btn.BackgroundColor3 = Color3.fromRGB(0,170,255)
            btn.TextColor3 = Color3.new(1,1,1)
            btn.Font = Enum.Font.GothamBold
            btn.TextScaled = true

            local flying = false
            btn.MouseButton1Down:Connect(function() flying = true end)
            btn.MouseButton1Up:Connect(function() flying = false end)

            local conn = RunService.Heartbeat:Connect(function()
                if FlyEnabled and hrp and bv and bg then
                    bv.Velocity = Workspace.CurrentCamera.CFrame.LookVector * (flying and 50 or 0)
                    bg.CFrame = Workspace.CurrentCamera.CFrame
                end
            end)

            task.spawn(function()
                while FlyEnabled do task.wait() end
                if bv then bv:Destroy() end
                if bg then bg:Destroy() end
                if gui then gui:Destroy() end
                if conn then conn:Disconnect() end
            end)
        end
    end
})

UniversalTab:CreateButton({Name = "FPS Booster", Callback = function()
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    for _,v in pairs(Workspace:GetDescendants()) do
        if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
            v.Enabled = false
        end
    end
    debugPrint("FPS Booster applied")
end})

-- Touch Joystick
local JoystickActive = false
UniversalTab:CreateToggle({
    Name = "Touch Joystick",
    CurrentValue = false,
    Flag = "JoystickFlag",
    Callback = function(state)
        JoystickActive = state
        if state then
            local gui = Instance.new("ScreenGui", CoreGui)
            local outer = Instance.new("Frame", gui)
            outer.Size = UDim2.new(0,120,0,120)
            outer.Position = UDim2.new(0.05,0,0.7,0)
            outer.BackgroundTransparency = 0.7
            outer.BackgroundColor3 = Color3.new(0,0,0)

            local inner = Instance.new("Frame", outer)
            inner.Size = UDim2.new(0,40,0,40)
            inner.Position = UDim2.new(0.5,-20,0.5,-20)
            inner.BackgroundColor3 = Color3.new(1,1,1)

            local inputObj
            local center = outer.AbsolutePosition + Vector2.new(60,60)

            local s = UserInputService.TouchStarted:Connect(function(i)
                if not JoystickActive then return end
                if (i.Position - center).Magnitude <= 60 then inputObj = i end
            end)
            local m = UserInputService.TouchMoved:Connect(function(i)
                if i == inputObj and LocalPlayer.Character then
                    local delta = i.Position - center
                    local mag = math.min(delta.Magnitude,60)
                    inner.Position = UDim2.new(0, delta.X + 40, 0, delta.Y + 40)
                    LocalPlayer.Character.Humanoid:Move(Vector3.new(delta.X/60,0,delta.Y/60), true)
                end
            end)
            local e = UserInputService.TouchEnded:Connect(function(i)
                if i == inputObj then
                    inner.Position = UDim2.new(0.5,-20,0.5,-20)
                    inputObj = nil
                end
            end)

            task.spawn(function()
                while JoystickActive do task.wait() end
                gui:Destroy()
                s:Disconnect(); m:Disconnect(); e:Disconnect()
            end)
        end
    end
})

-- ==================== GAMES TAB ====================
local GamesSection = GamesTab:CreateSection("Game Scripts")
local AntiDetectionSection = GamesTab:CreateSection("Anti-Detection Features")

-- Prison Life
GamesTab:CreateButton({
    Name = "Prison Life Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Vynixius/main/PrisonLife/PrisonLife.lua"))() end)
    end
})

-- The Strongest Battlegrounds
GamesTab:CreateButton({
    Name = "Strongest Battlegrounds Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/FFJ1/Roblox-Exploits/main/scripts/Loader.lua"))() end)
    end
})

-- Piggy
GamesTab:CreateButton({
    Name = "Piggy Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/BaconBABA/script/refs/heads/main/piggy.lua"))() end)
    end
})

-- Steal a Brainrot
GamesTab:CreateButton({
    Name = "Steal a Brainrot Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/Klinac/scripts/main/steal_a_brainrot.lua", true))() end)
    end
})

-- Grow a Garden
GamesTab:CreateButton({
    Name = "Grow a Garden Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/TheDarkoneMarcillisePex/Other-Scripts/refs/heads/main/Grow%20a%20Garden%20GUI.lua"))() end)
    end
})

-- Da Hood
GamesTab:CreateButton({
    Name = "Da Hood Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Vynixius/main/Da%20Hood/Da%20Hood.lua"))() end)
    end
})

-- Emergency Hamburg
GamesTab:CreateButton({
    Name = "Emergency Hamburg Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/pid4k/scripts/main/BeanzHub.lua", true))() end)
    end
})

-- 99 Nights in the Forest (fixed URL)
GamesTab:CreateButton({
    Name = "99 Nights in the Forest Script",
    Callback = function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/TheDarkoneMarcillisePex/Other-Scripts/refs/heads/main/99%20Nights%20In%20The%20Forest%20GUI.lua"))() end)
    end
})

-- Anti-Detection
GamesTab:CreateToggle({
    Name = "Anti-Kick",
    CurrentValue = false,
    Flag = "AntiKickFlag",
    Callback = function(state)
        if state then
            local mt = getrawmetatable(game)
            local old = mt.__namecall
            setreadonly(mt, false)
            mt.__namecall = function(self, ...)
                local method = getnamecallmethod()
                if method == "Kick" then return end
                return old(self, ...)
            end
            setreadonly(mt, true)
            debugPrint("Anti-Kick enabled")
        end
    end
})

GamesTab:CreateToggle({
    Name = "Fake WalkSpeed (Anti-Detect)",
    CurrentValue = false,
    Flag = "FakeWalkSpeedFlag",
    Callback = function(state)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = state and 16 or walkspeedValue
        end
    end
})

GamesTab:CreateToggle({
    Name = "Anti-Dex Explorer",
    CurrentValue = false,
    Flag = "AntiDexFlag",
    Callback = function(state)
        if state and gethui then
            local h = gethui()
            if h then h:Destroy() end
            debugPrint("Anti-Dex enabled")
        end
    end
})

-- ==================== CONNECTIONS ====================
Players.PlayerAdded:Connect(function(p)
    if ESP.Enabled then createESP(p) end
    RefreshButton.Callback()
end)

Players.PlayerRemoving:Connect(function(p)
    if highlightCache[p] then
        if highlightCache[p].highlight then highlightCache[p].highlight:Destroy() end
        if highlightCache[p].name then highlightCache[p].name:Destroy() end
        highlightCache[p] = nil
    end
    if spectatingPlayer == p then
        ViewToggle:Set(false)
        spectatingPlayer = nil
        lastSelectedPlayerName = nil
        PlayerDropdown:Set({})
    end
    RefreshButton.Callback()
end)

Teams.TeamAdded:Connect(RefreshButton.Callback)
Teams.TeamRemoved:Connect(RefreshButton.Callback)

LocalPlayer.CharacterAdded:Connect(function(char)
    if walkspeedEnabled and char:FindFirstChild("Humanoid") then
        char.Humanoid.WalkSpeed = walkspeedValue
    end
    if jumpPowerEnabled and char:FindFirstChild("Humanoid") then
        char.Humanoid.JumpPower = jumpPowerValue
    end
    if spectatingPlayer and ViewToggle.CurrentValue and lastSelectedPlayerName then
        local t = Players:FindFirstChild(lastSelectedPlayerName)
        if t and t.Character and t.Character:FindFirstChild("Humanoid") then
            Workspace.CurrentCamera.CameraSubject = t.Character.Humanoid
        else
            ViewToggle:Set(false)
            lastSelectedPlayerName = nil
            PlayerDropdown:Set({})
        end
    end
end)

-- Initial refresh
RefreshButton.Callback()
debugPrint("ApertureHub fully loaded!")