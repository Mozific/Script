-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- Debug function
local function debugPrint(message)
    print("[ApertureHub Debug]: " .. tostring(message))
end

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield', true, 10))()
if not Rayfield then
    debugPrint("Failed to load Rayfield library")
    return
end
debugPrint("Rayfield library loaded successfully")

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "Aperture Science Innovators",
    Title = "Ocyx",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Ocyx",
    Theme = "Ocean",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ApertureHubConfig",
        FileName = "ApertureHub"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Enter Access code",
        Note = "",
        FileName = "ApertureKeys",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"GlaDOS", "Meat"}
    }
})
debugPrint("Window created successfully")

-- Tabs
local PlayerTab = Window:CreateTab("Player", 4483362458)
local VisualTab = Window:CreateTab("Visual", 4483362458)
local UniversalTab = Window:CreateTab("Universal", 4483362458)
local GamesTab = Window:CreateTab("Games", 4483362458)

-- Player Tab Elements
local PlayerSection = PlayerTab:CreateSection("Player")
local defaultWalkSpeed = 16
local defaultJumpPower = 50
local walkspeedEnabled = false
local jumpPowerEnabled = false
local walkspeedValue = defaultWalkSpeed
local jumpPowerValue = defaultJumpPower

local WalkspeedSlider = PlayerTab:CreateSlider({
    Name = "Walkspeed",
    Range = {16, 200},
    Increment = 1,
    CurrentValue = 16,
    Flag = "WalkspeedFlag",
    Callback = function(val)
        walkspeedValue = val
        if walkspeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = val
            debugPrint("Walkspeed set to: " .. val)
        end
    end
})

local JumpPowerSlider = PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    CurrentValue = 50,
    Flag = "JumpPowerFlag",
    Callback = function(val)
        jumpPowerValue = val
        if jumpPowerEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = val
            debugPrint("JumpPower set to: " .. val)
        end
    end
})

local WalkspeedToggle = PlayerTab:CreateToggle({
    Name = "Enable Walkspeed",
    CurrentValue = false,
    Flag = "WalkspeedToggleFlag",
    Callback = function(state)
        walkspeedEnabled = state
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            local humanoid = LocalPlayer.Character.Humanoid
            humanoid.WalkSpeed = state and walkspeedValue or defaultWalkSpeed
            debugPrint("Walkspeed toggle: " .. (state and "Enabled" or "Disabled"))
        end
    end
})

local JumpPowerToggle = PlayerTab:CreateToggle({
    Name = "Enable JumpPower",
    CurrentValue = false,
    Flag = "JumpPowerToggleFlag",
    Callback = function(state)
        jumpPowerEnabled = state
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            local humanoid = LocalPlayer.Character.Humanoid
            humanoid.JumpPower = state and jumpPowerValue or defaultJumpPower
            debugPrint("JumpPower toggle: " .. (state and "Enabled" or "Disabled"))
        end
    end
})

-- Noclip
local NoclipEnabled = false
local noclipConnection
local NoclipToggle = PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipFlag",
    Callback = function(state)
        NoclipEnabled = state
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
        if state then
            noclipConnection = RunService.Stepped:Connect(function()
                if NoclipEnabled and LocalPlayer.Character then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            debugPrint("Noclip enabled")
        else
            debugPrint("Noclip disabled")
        end
    end
})

-- Advanced ESP Section
local EspSection = VisualTab:CreateSection("ESP Settings")
local ESP = {
    Enabled = false,
    Names = false,
    SelectedTeam = "All",
    NameColor = Color3.fromRGB(255, 255, 255),
    MaxDistance = 500
}

local espConnections = {}
local highlightCache = {}
local espUpdateInterval = 1.5
local lastEspUpdate = 0

local function createESP(player)
    if player == LocalPlayer or (ESP.SelectedTeam ~= "All" and player.Team and player.Team.Name ~= ESP.SelectedTeam) then
        return
    end

    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local localPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if localPos and (character.HumanoidRootPart.Position - localPos.Position).Magnitude > ESP.MaxDistance then
        return
    end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESPHighlight"
    highlight.Adornee = character
    highlight.FillColor = player.Team and player.Team.TeamColor.Color or Color3.fromRGB(255, 0, 0)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    highlight.FillTransparency = 0.95
    highlight.OutlineTransparency = 0.5
    highlight.Parent = character

    local name
    if ESP.Names then
        name = Instance.new("BillboardGui")
        name.Name = "ESPName"
        name.Size = UDim2.new(0, 40, 0, 10)
        name.StudsOffset = Vector3.new(0, 1.5, 0)
        name.AlwaysOnTop = false
        name.Adornee = character:FindFirstChild("Head")
        local text = Instance.new("TextLabel")
        text.Size = UDim2.new(1, 0, 1, 0)
        text.BackgroundTransparency = 1
        text.TextColor3 = ESP.NameColor
        text.Text = player.Name
        text.TextScaled = true
        text.TextStrokeTransparency = 0.95
        text.Parent = name
        name.Parent = character
    end

    highlightCache[player] = {highlight = highlight, name = name}
end

local function updateESP()
    if not ESP.Enabled then return end
    local localPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    for player, data in pairs(highlightCache) do
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") or
           (ESP.SelectedTeam ~= "All" and player.Team and player.Team.Name ~= ESP.SelectedTeam) or
           (localPos and (player.Character.HumanoidRootPart.Position - localPos.Position).Magnitude > ESP.MaxDistance) then
            if data.highlight then data.highlight:Destroy() end
            if data.name then data.name:Destroy() end
            highlightCache[player] = nil
        else
            data.highlight.Visible = ESP.Enabled
            if data.name then data.name.Visible = ESP.Names end
            data.highlight.FillColor = player.Team and player.Team.TeamColor.Color or Color3.fromRGB(255, 0, 0)
        end
    end
end

local EspToggle = VisualTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Flag = "ESPFlag",
    Callback = function(state)
        ESP.Enabled = state
        if state then
            for _, player in pairs(Players:GetPlayers()) do
                createESP(player)
            end
            espConnections["update"] = RunService.Heartbeat:Connect(function(deltaTime)
                lastEspUpdate = lastEspUpdate + deltaTime
                if lastEspUpdate >= espUpdateInterval then
                    updateESP()
                    lastEspUpdate = 0
                end
            end)
        else
            for player, data in pairs(highlightCache) do
                if data.highlight then data.highlight:Destroy() end
                if data.name then data.name:Destroy() end
                highlightCache[player] = nil
            end
            for _, conn in pairs(espConnections) do
                conn:Disconnect()
            end
            espConnections = {}
        end
        debugPrint("ESP toggle: " .. (state and "Enabled" or "Disabled"))
    end
})

local NameToggle = VisualTab:CreateToggle({
    Name = "Show Names",
    CurrentValue = false,
    Flag = "ESPNameFlag",
    Callback = function(state)
        ESP.Names = state
        if ESP.Enabled then
            EspToggle.Callback(false)
            EspToggle.Callback(true)
        end
        debugPrint("ESP Names: " .. (state and "Enabled" or "Disabled"))
    end
})

local TeamDropdown = VisualTab:CreateDropdown({
    Name = "Select Team",
    Options = {"All"},
    CurrentOption = {"All"},
    MultipleOptions = false,
    Flag = "ESPTeamDropdown",
    Callback = function(options)
        ESP.SelectedTeam = options[1]
        if ESP.Enabled then
            EspToggle.Callback(false)
            EspToggle.Callback(true)
        end
        debugPrint("ESP Team selected: " .. options[1])
    end
})

-- View Section
local ViewSection = VisualTab:CreateSection("View")
local spectatingPlayer = nil
local lastSelectedPlayerName = nil

local ViewToggle = VisualTab:CreateToggle({
    Name = "Spectate Player",
    CurrentValue = false,
    Flag = "ViewPlayersFlag",
    Callback = function(state)
        if not state then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
            end
            spectatingPlayer = nil
            debugPrint("Spectate disabled")
        elseif lastSelectedPlayerName then
            local targetPlayer = Players:FindFirstChild(lastSelectedPlayerName)
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
                spectatingPlayer = targetPlayer
                Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
                debugPrint("Spectating player: " .. targetPlayer.Name)
            else
                debugPrint("Cannot spectate: No valid player selected")
                ViewToggle:Set(false)
                PlayerDropdown:Set({})
                lastSelectedPlayerName = nil
            end
        else
            debugPrint("Cannot spectate: No player selected")
            ViewToggle:Set(false)
        end
    end
})

local PlayerDropdown = VisualTab:CreateDropdown({
    Name = "Select Player",
    Options = {},
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "PlayerViewDropdown",
    Callback = function(options)
        local targetPlayerName = options[1]
        lastSelectedPlayerName = targetPlayerName
        local targetPlayer = Players:FindFirstChild(targetPlayerName)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
            spectatingPlayer = targetPlayer
            if ViewToggle.CurrentValue then
                Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
                debugPrint("Selected player to spectate: " .. targetPlayerName)
            end
        else
            spectatingPlayer = nil
            lastSelectedPlayerName = nil
            if ViewToggle.CurrentValue then
                ViewToggle:Set(false)
                debugPrint("Failed to select player for spectate: " .. tostring(targetPlayerName))
            end
        end
        PlayerDropdown:Set({targetPlayerName})
    end
})

local RefreshButton = VisualTab:CreateButton({
    Name = "Refresh Players",
    Callback = function()
        local players = {}
        local currentSelection = lastSelectedPlayerName
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                table.insert(players, plr.Name)
            end
        end
        PlayerDropdown:Refresh(players)
        if currentSelection and table.find(players, currentSelection) then
            PlayerDropdown:Set({currentSelection})
        else
            lastSelectedPlayerName = nil
            spectatingPlayer = nil
            if ViewToggle.CurrentValue then
                ViewToggle:Set(false)
            end
        end
        
        local teams = {"All"}
        for _, team in pairs(Teams:GetTeams()) do
            table.insert(teams, team.Name)
        end
        TeamDropdown:Refresh(teams)
        debugPrint("Refreshed player and team lists")
    end
})

-- Universal Tab
local UniversalCommandsSection = UniversalTab:CreateSection("Universal Commands")

-- Infinite Yield
local InfiniteYieldButton = UniversalTab:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
        end)
        if success then
            debugPrint("Infinite Yield loaded successfully")
        else
            debugPrint("Failed to load Infinite Yield: " .. tostring(errorMsg))
        end
    end
})

-- Nameless Admin
local NamelessAdminButton = UniversalTab:CreateButton({
    Name = "Nameless Admin",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Fantemil/Nameless-Admin/main/Source"))()
        end)
        if success then
            debugPrint("Nameless Admin loaded successfully")
        else
            debugPrint("Failed to load Nameless Admin: " .. tostring(errorMsg))
        end
    end
})

-- QuirkyCMDS
local QuirkyCMDSButton = UniversalTab:CreateButton({
    Name = "QuirkyCMDS",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-QuirkyCMD-FE-admin-8667"))()
        end)
        if success then
            debugPrint("QuirkyCMDS loaded successfully")
        else
            debugPrint("Failed to load QuirkyCMDS: " .. tostring(errorMsg))
        end
    end
})

-- Reviz Admin
local RevizAdminButton = UniversalTab:CreateButton({
    Name = "Reviz Admin",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Stefanuk12/REVIZ-ADMIN/main/source.lua"))()
        end)
        if success then
            debugPrint("Reviz Admin loaded successfully")
        else
            debugPrint("Failed to load Reviz Admin: " .. tostring(errorMsg))
        end
    end
})

-- Owl Hub
local OwlHubButton = UniversalTab:CreateButton({
    Name = "Owl Hub",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/CriShoux/OwlHub/master/OwlHub.txt"))()
        end)
        if success then
            debugPrint("Owl Hub loaded successfully")
        else
            debugPrint("Failed to load Owl Hub: " .. tostring(errorMsg))
        end
    end
})

-- Mobile Tools Section
local MobileToolsSection = UniversalTab:CreateSection("Mobile Tools")

-- Keyboard
local KeyboardButton = UniversalTab:CreateButton({
    Name = "Keyboard",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-key-buttons-25179"))()
        end)
        if success then
            debugPrint("Keyboard GUI loaded successfully")
        else
            debugPrint("Failed to load Keyboard: " .. tostring(errorMsg))
        end
    end
})

-- Click TP
local ClickTPEnabled = false
local ClickTPToggle = UniversalTab:CreateToggle({
    Name = "Click TP (Tap to Teleport)",
    CurrentValue = false,
    Flag = "ClickTPFlag",
    Callback = function(state)
        ClickTPEnabled = state
        if state then
            local connection
            connection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch and LocalPlayer.Character then
                    local pos = input.Position
                    local ray = Workspace.CurrentCamera:ScreenPointToRay(pos.X, pos.Y)
                    local result = Workspace:FindPartOnRayWithIgnoreList(Ray.new(ray.Origin, ray.Direction * 1000), {LocalPlayer.Character})
                    if result then
                        LocalPlayer.Character:MoveTo(result.Position + Vector3.new(0, 3, 0))
                    end
                end
            end)
            task.spawn(function()
                while ClickTPEnabled do
                    task.wait()
                end
                if connection then connection:Disconnect() end
            end)
        end
        debugPrint("Click TP: " .. (state and "Enabled" or "Disabled"))
    end
})

-- Mobile Fly
local FlyEnabled = false
local FlyToggle = UniversalTab:CreateToggle({
    Name = "Mobile Fly",
    CurrentValue = false,
    Flag = "FlyFlag",
    Callback = function(state)
        FlyEnabled = state
        if state and LocalPlayer.Character then
            local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if not hrp then return end

            local bv = Instance.new("BodyVelocity")
            bv.Velocity = Vector3.new(0, 0, 0)
            bv.MaxForce = Vector3.new(4000, 4000, 4000)
            bv.Parent = hrp

            local bg = Instance.new("BodyGyro")
            bg.P = 2000
            bg.MaxTorque = Vector3.new(4000, 4000, 4000)
            bg.Parent = hrp

            local flyGui = Instance.new("ScreenGui")
            flyGui.Name = "FlyGui"
            local flyBtn = Instance.new("TextButton")
            flyBtn.Size = UDim2.new(0, 80, 0, 80)
            flyBtn.Position = UDim2.new(0.85, 0, 0.7, 0)
            flyBtn.Text = "↑"
            flyBtn.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
            flyBtn.TextColor3 = Color3.new(1,1,1)
            flyBtn.Font = Enum.Font.GothamBold
            flyBtn.TextScaled = true
            flyBtn.Parent = flyGui
            flyGui.Parent = CoreGui

            local flying = false
            flyBtn.MouseButton1Down:Connect(function()
                flying = true
            end)
            flyBtn.MouseButton1Up:Connect(function()
                flying = false
            end)

            local flyConnection = RunService.Heartbeat:Connect(function()
                if FlyEnabled and hrp and bv and bg then
                    bv.Velocity = Workspace.CurrentCamera.CFrame.LookVector * (flying and 50 or 0)
                    bg.CFrame = Workspace.CurrentCamera.CFrame
                end
            end)

            task.spawn(function()
                while FlyEnabled do
                    task.wait()
                end
                if bv then bv:Destroy() end
                if bg then bg:Destroy() end
                if flyGui then flyGui:Destroy() end
                if flyConnection then flyConnection:Disconnect() end
            end)
        end
        debugPrint("Mobile Fly: " .. (state and "Enabled" or "Disabled"))
    end
})

-- FPS Booster
local FPSBoosterButton = UniversalTab:CreateButton({
    Name = "FPS Booster",
    Callback = function()
        local success, errorMsg = pcall(function()
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
            for _, v in pairs(Workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
                    v.Enabled = false
                end
            end
            debugPrint("FPS Booster applied - Graphics reduced, particles disabled")
        end)
        if not success then
            debugPrint("Failed to apply FPS Booster: " .. tostring(errorMsg))
        end
    end
})

-- Touch Joystick
local JoystickActive = false
local JoystickToggle = UniversalTab:CreateToggle({
    Name = "Touch Joystick",
    CurrentValue = false,
    Flag = "JoystickFlag",
    Callback = function(state)
        JoystickActive = state
        if state then
            local joystickGui = Instance.new("ScreenGui")
            joystickGui.Name = "JoystickGui"
            local outer = Instance.new("Frame")
            outer.Size = UDim2.new(0, 120, 0, 120)
            outer.Position = UDim2.new(0.05, 0, 0.7, 0)
            outer.BackgroundTransparency = 0.7
            outer.BackgroundColor3 = Color3.new(0,0,0)
            outer.BorderSizePixel = 0
            outer.Parent = joystickGui

            local inner = Instance.new("Frame")
            inner.Size = UDim2.new(0, 40, 0, 40)
            inner.Position = UDim2.new(0.5, -20, 0.5, -20)
            inner.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            inner.BorderSizePixel = 0
            inner.Parent = outer

            joystickGui.Parent = CoreGui

            local inputObj
            local center = outer.AbsolutePosition + Vector2.new(60, 60)

            local touchStarted = UserInputService.TouchStarted:Connect(function(input)
                if not JoystickActive then return end
                local pos = input.Position
                if (pos - center).Magnitude <= 60 then
                    inputObj = input
                end
            end)

            local touchMoved = UserInputService.TouchMoved:Connect(function(input)
                if input == inputObj and LocalPlayer.Character then
                    local delta = input.Position - center
                    local clampedDelta = delta.Unit * math.min(delta.Magnitude, 60)
                    inner.Position = UDim2.new(0, clampedDelta.X + 40, 0, clampedDelta.Y + 40)
                    local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if hrp and LocalPlayer.Character:FindFirstChild("Humanoid") then
                        LocalPlayer.Character.Humanoid:Move(Vector3.new(clampedDelta.X / 60, 0, clampedDelta.Y / 60), true)
                    end
                end
            end)

            local touchEnded = UserInputService.TouchEnded:Connect(function(input)
                if input == inputObj then
                    inner.Position = UDim2.new(0.5, -20, 0.5, -20)
                    inputObj = nil
                end
            end)

            task.spawn(function()
                while JoystickActive do task.wait() end
                if joystickGui then joystickGui:Destroy() end
                touchStarted:Disconnect()
                touchMoved:Disconnect()
                touchEnded:Disconnect()
            end)
        end
        debugPrint("Touch Joystick: " .. (state and "Enabled" or "Disabled"))
    end
})

-- Games Tab - Game-Specific Scripts
local GamesSection = GamesTab:CreateSection("Game Scripts")
local AntiDetectionSection = GamesTab:CreateSection("Anti-Detection Features")

-- Prison Life Script
local PrisonLifeButton = GamesTab:CreateButton({
    Name = "Prison Life Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Vynixius/main/PrisonLife/PrisonLife.lua"))()
        end)
        if success then
            debugPrint("Prison Life Script loaded successfully")
        else
            debugPrint("Failed to load Prison Life Script: " .. tostring(errorMsg))
        end
    end
})

-- The Strongest Battlegrounds Script
local StrongestBattlegroundsButton = GamesTab:CreateButton({
    Name = "Strongest Battlegrounds Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/FFJ1/Roblox-Exploits/main/scripts/Loader.lua"))()
        end)
        if success then
            debugPrint("Strongest Battlegrounds Script loaded successfully")
        else
            debugPrint("Failed to load Strongest Battlegrounds Script: " .. tostring(errorMsg))
        end
    end
})

-- Piggy Script
local PiggyButton = GamesTab:CreateButton({
    Name = "Piggy Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/BaconBABA/script/refs/heads/main/piggy.lua"))()
        end)
        if success then
            debugPrint("Piggy Script loaded successfully")
        else
            debugPrint("Failed to load Piggy Script: " .. tostring(errorMsg))
        end
    end
})

-- Steal a Brainrot Script
local StealABrainrotButton = GamesTab:CreateButton({
    Name = "Steal a Brainrot Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Klinac/scripts/main/steal_a_brainrot.lua", true))()
        end)
        if success then
            debugPrint("Steal a Brainrot Script loaded successfully")
        else
            debugPrint("Failed to load Steal a Brainrot Script: " .. tostring(errorMsg))
        end
    end
})

-- Grow a Garden Script
local GrowAGardenButton = GamesTab:CreateButton({
    Name = "Grow a Garden Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/TheDarkoneMarcillisePex/Other-Scripts/refs/heads/main/Grow%20a%20Garden%20GUI.lua"))()
        end)
        if success then
            debugPrint("Grow a Garden Script loaded successfully")
        else
            debugPrint("Failed to load Grow a Garden Script: " .. tostring(errorMsg))
        end
    end
})

-- Da Hood Script
local DaHoodButton = GamesTab:CreateButton({
    Name = "Da Hood Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Vynixius/main/Da%20Hood/Da%20Hood.lua"))()
        end)
        if success then
            debugPrint("Da Hood Script loaded successfully")
        else
            debugPrint("Failed to load Da Hood Script: " .. tostring(errorMsg))
        end
    end
})

-- Emergency Hamburg Script
local EmergencyHamburgButton = GamesTab:CreateButton({
    Name = "Emergency Hamburg Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/pid4k/scripts/main/BeanzHub.lua", true))()
        end)
        if success then
            debugPrint("Emergency Hamburg Script loaded successfully")
        else
            debugPrint("Failed to load Emergency Hamburg Script: " .. tostring(errorMsg))
        end
    end
})

-- 99 Nights in the Forest Script
local NightsInForestButton = GamesTab:CreateButton({
    Name = "99 Nights in the Forest Script",
    Callback = function()
        local success, errorMsg = pcall(function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/TheDarkoneMarcillisePex/Other-Scripts/refs/heads/main/99 Nights In The Forest GUI'))()
        end)
        if success then
            debugPrint("99 Nights in the Forest Script loaded successfully")
        else
            debugPrint("Failed to load 99 Nights in the Forest Script: " .. tostring(errorMsg))
        end
    end
})

-- Anti-Detection Features
local AntiKickToggle = GamesTab:CreateToggle({
    Name = "Anti-Kick",
    CurrentValue = false,
    Flag = "AntiKickFlag",
    Callback = function(state)
        if state then
            local mt = getrawmetatable(game)
            local old = mt.__namecall
            setreadonly(mt, false)
            mt.__namecall = function(self, ...)
                local args = {...}
                local method = getnamecallmethod()
                if method == "Kick" then
                    return
                end
                return old(self, ...)
            end
            setreadonly(mt, true)
            debugPrint("Anti-Kick enabled")
        end
    end
})

local FakeWalkSpeedToggle = GamesTab:CreateToggle({
    Name = "Fake WalkSpeed (Anti-Detect)",
    CurrentValue = false,
    Flag = "FakeWalkSpeedFlag",
    Callback = function(state)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = state and 16 or walkspeedValue
            debugPrint("Fake WalkSpeed: " .. (state and "Enabled (16)" or "Disabled"))
        end
    end
})

local AntiDexToggle = GamesTab:CreateToggle({
    Name = "Anti-Dex Explorer",
    CurrentValue = false,
    Flag = "AntiDexFlag",
    Callback = function(state)
        -- Simple detection bypass for Dex
        if state then
            if gethui then
                local dex = gethui()
                if dex then dex:Destroy() end
            end
            debugPrint("Anti-Dex enabled")
        end
    end
})

-- Handle player joining/leaving
Players.PlayerAdded:Connect(function(player)
    if ESP.Enabled then
        createESP(player)
    end
    RefreshButton.Callback()
end)

Players.PlayerRemoving:Connect(function(player)
    if highlightCache[player] then
        if highlightCache[player].highlight then highlightCache[player].highlight:Destroy() end
        if highlightCache[player].name then highlightCache[player].name:Destroy() end
        highlightCache[player] = nil
    end
    if spectatingPlayer == player then
        ViewToggle:Set(false)
        spectatingPlayer = nil
        lastSelectedPlayerName = nil
        PlayerDropdown:Set({})
    end
    RefreshButton.Callback()
end)

-- Handle team changes
Teams.TeamAdded:Connect(function()
    RefreshButton.Callback()
end)

Teams.TeamRemoved:Connect(function()
    RefreshButton.Callback()
end)

-- Handle character reloads
LocalPlayer.CharacterAdded:Connect(function(character)
    if walkspeedEnabled and character:FindFirstChild("Humanoid") then
        character.Humanoid.WalkSpeed = walkspeedValue
    end
    if jumpPowerEnabled and character:FindFirstChild("Humanoid") then
        character.Humanoid.JumpPower = jumpPowerValue
    end
    if spectatingPlayer and ViewToggle.CurrentValue and lastSelectedPlayerName then
        local targetPlayer = Players:FindFirstChild(lastSelectedPlayerName)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
            spectatingPlayer = targetPlayer
            Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
            debugPrint("Reapplied spectate after character reload: " .. lastSelectedPlayerName)
        else
            ViewToggle:Set(false)
            spectatingPlayer = nil
            lastSelectedPlayerName = nil
            PlayerDropdown:Set({})
            debugPrint("Spectate reset: Target player character invalid")
        end
    end
    debugPrint("Character reloaded, applied settings")
end)

-- Initial refresh
RefreshButton.Callback()
debugPrint("Script initialized successfully")